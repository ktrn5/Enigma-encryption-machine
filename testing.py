import pytest
from enigma import Enigma
import helpers

######################################################################
#ТЕСТ 1: Энигма должна работать с любым положением роторов уникально.
def test_rotor_differences():
    """Тест запускает шифровальную машину с разными начальными точками.
    На примере одного слова сранивает, что шифрование уникально."""

    enigma_set1 = Enigma('А', 'А', 'А') #одинаковые буквы на каждом ротора
    enigma_set2 = Enigma('А', 'О', 'Я')
    enigma_set3 = Enigma('Ш', ' ', 'У') #и даже с пробелом
    cipher1 = enigma_set1.encrypr("привет")
    cipher2 = enigma_set2.encrypr("привет")
    cipher3 = enigma_set3.encrypr("привет")
    assert cipher1 != cipher2 and cipher3 != cipher2 and cipher1 !=cipher3 #результат должен быть различным



######################################################################
#ТЕСТ 2: при вводе начальных параметров мой код предусматривает, что нужно вводить ровно 3 символа.
# Проверка на то, что предупреждение срабатывает в верных случаях
@pytest.mark.parametrize("input_value", ["АА", "АМАА", "А", "АЬАЬАЬ", "А  Л"])
def test_check_initial_let_invalid_length(input_value):
    """Проверка, появляется ли предупреждение при вводе 1-2, 4+ символом (с учетом пробелов посередине)"""
    with pytest.raises(ValueError, match="Ошибка. Введите 3 символа."):
        helpers.check_initial_let(input_value)


######################################################################
#фикстура: установим конкретное положение роторов.
@pytest.fixture
def enigma_set():
    """Фикстура. Заданное положение роторов : абв."""
    return Enigma('а', 'б', 'в')

######################################################################
#ТЕСТ 3: проверка на то, что шифр всегда отличается от заданного текста
@pytest.mark.parametrize("input_text", [
    "найти пяти отличий",
    "тЕстирование",
    "вшэ вшэ вшэ"])
def test_cipher(enigma_set, input_text):
    """Тест на корректность работы: шифр не совпадал с исходным словом"""
    enigma_set1 = enigma_set
    cipher = enigma_set1.encrypr(input_text)
    assert cipher != input_text



######################################################################
#ТЕСТ 4. Используя параметризацию, убедимся, что введенный текст корректной шифруется (шифр соответствует ожидаемому)
#в том числе проверяется другой регистр
@pytest.mark.parametrize('input_text, expected_encrypted', [
    ("я помню чудное мгновенье", "МВМЛШСЫМЕЗОГПВСЛЖТГНЫРЖД"),
    ("скажи ка дядя недаром москва спаленная пожаров была французу отдана", "ООЬЁЫЭЦТСЦЛЖЮГМШЧЛУСБТПЛЯЁББАГУЕКЛРЖ КХЯТЙ ШЖСФЗШЫБАСФМЁЙН ЙГМЫЕМРМ"),
    ("питон", "ЛЗЮЛК"),
    ("текст текст для проверки", "ЦТЭЭОЭЗИОТЖЯАБВЙЮУГНЫН Ч"),
    ("ПИТОН", "ЛЗЮЛК") ]) #устойчивость к регистру
def test_encryption(enigma_set, input_text, expected_encrypted):
    """Тестирование шифрования текста."""
    encrypted_text = enigma_set.encrypr(input_text)
    assert encrypted_text == expected_encrypted



######################################################################
#ТЕСТ 5: проверим дешифровку. На ввод подается шифр и ожидаемый расшифрованный текст
#благодаря фикстуре: настройка энигмы прежняя --> должен быть корректный шифр.
@pytest.mark.parametrize("cipher, desrypt", [
    ("МВМЛШСЫМЕЗОГПВСЛЖТГНЫРЖД", "я помню чудное мгновенье"),
    ("ООЬЁЫЭЦТСЦЛЖЮГМШЧЛУСБТПЛЯЁББАГУЕКЛРЖ КХЯТЙ ШЖСФЗШЫБАСФМЁЙН ЙГМЫЕМРМ",
     "скажи ка дядя недаром москва спаленная пожаров была французу отдана"),
    ("ЛЗЮЛК", "питон"),  # Обычное выражение
    ("ЦТЭЭОЭЗИОТЖЯАБВЙЮУГНЫН Ч", "текст текст для проверки")])
def test_decryption(enigma_set, cipher, desrypt):
    """Тестирование дешифрования текста"""
    decrypted_text = enigma_set.encrypr(cipher).lower()
    assert decrypted_text == desrypt



######################################################################
#ТЕСТ 6: шифровка\расшифровка с разной настройкой роторов
@pytest.mark.parametrize("input_text", [
    "КОТ кот",
    "тЕстирование",
    "ёёёёё"])
def test_diff_rotor_start(enigma_set, input_text):
    """Тест на корректность работы: проверяем, что если сообщения зашифровано одной настройкой роторов,
     то расшифровать с другой настройкой невозможно."""

    enigma_set1 = enigma_set
    enigma_set2 = Enigma('У', ' ', 'Ж')

    encrypted_text = enigma_set1.encrypr(input_text)
    decrypted_text = enigma_set2.encrypr(encrypted_text)  # пытаемся "расшифровать" то, что шифровали, но с другими настройками ротора
    assert input_text != decrypted_text  # шифр не должен совпадать с исходным словом



# tests passed
# ============================= 21 passed in 0.17s ==============================
# 
# Process finished with exit code 0
